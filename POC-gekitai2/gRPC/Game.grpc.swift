//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: Game.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `GameClient`, then call methods of this protocol to make API calls.
internal protocol GameClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: GameClientInterceptorFactoryProtocol? { get }

  func invite(
    _ request: InviteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<InviteRequest, InviteReply>

  func start(
    _ request: StartRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<StartRequest, StartReply>

  func restart(
    _ request: RestartRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<RestartRequest, RestartReply>

  func end(
    _ request: EndRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<EndRequest, EndReply>

  func quit(
    _ request: QuitRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<QuitRequest, QuitReply>

  func move(
    _ request: MoveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MoveRequest, MoveReply>

  func message(
    _ request: MessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MessageRequest, MessageReply>
}

extension GameClientProtocol {
  internal var serviceName: String {
    return "Game"
  }

  /// Unary call to Invite
  ///
  /// - Parameters:
  ///   - request: Request to send to Invite.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func invite(
    _ request: InviteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<InviteRequest, InviteReply> {
    return self.makeUnaryCall(
      path: GameClientMetadata.Methods.invite.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInviteInterceptors() ?? []
    )
  }

  /// Unary call to Start
  ///
  /// - Parameters:
  ///   - request: Request to send to Start.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func start(
    _ request: StartRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<StartRequest, StartReply> {
    return self.makeUnaryCall(
      path: GameClientMetadata.Methods.start.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartInterceptors() ?? []
    )
  }

  /// Unary call to Restart
  ///
  /// - Parameters:
  ///   - request: Request to send to Restart.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func restart(
    _ request: RestartRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RestartRequest, RestartReply> {
    return self.makeUnaryCall(
      path: GameClientMetadata.Methods.restart.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRestartInterceptors() ?? []
    )
  }

  /// Unary call to End
  ///
  /// - Parameters:
  ///   - request: Request to send to End.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func end(
    _ request: EndRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EndRequest, EndReply> {
    return self.makeUnaryCall(
      path: GameClientMetadata.Methods.end.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEndInterceptors() ?? []
    )
  }

  /// Unary call to Quit
  ///
  /// - Parameters:
  ///   - request: Request to send to Quit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func quit(
    _ request: QuitRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<QuitRequest, QuitReply> {
    return self.makeUnaryCall(
      path: GameClientMetadata.Methods.quit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuitInterceptors() ?? []
    )
  }

  /// Unary call to Move
  ///
  /// - Parameters:
  ///   - request: Request to send to Move.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func move(
    _ request: MoveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MoveRequest, MoveReply> {
    return self.makeUnaryCall(
      path: GameClientMetadata.Methods.move.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveInterceptors() ?? []
    )
  }

  /// Unary call to Message
  ///
  /// - Parameters:
  ///   - request: Request to send to Message.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func message(
    _ request: MessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MessageRequest, MessageReply> {
    return self.makeUnaryCall(
      path: GameClientMetadata.Methods.message.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMessageInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension GameClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "GameNIOClient")
internal final class GameClient: GameClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: GameClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: GameClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the Game service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GameClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct GameNIOClient: GameClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GameClientInterceptorFactoryProtocol?

  /// Creates a client for the Game service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GameClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol GameAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: GameClientInterceptorFactoryProtocol? { get }

  func makeInviteCall(
    _ request: InviteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<InviteRequest, InviteReply>

  func makeStartCall(
    _ request: StartRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<StartRequest, StartReply>

  func makeRestartCall(
    _ request: RestartRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RestartRequest, RestartReply>

  func makeEndCall(
    _ request: EndRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EndRequest, EndReply>

  func makeQuitCall(
    _ request: QuitRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<QuitRequest, QuitReply>

  func makeMoveCall(
    _ request: MoveRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<MoveRequest, MoveReply>

  func makeMessageCall(
    _ request: MessageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<MessageRequest, MessageReply>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GameAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return GameClientMetadata.serviceDescriptor
  }

  internal var interceptors: GameClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeInviteCall(
    _ request: InviteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<InviteRequest, InviteReply> {
    return self.makeAsyncUnaryCall(
      path: GameClientMetadata.Methods.invite.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInviteInterceptors() ?? []
    )
  }

  internal func makeStartCall(
    _ request: StartRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<StartRequest, StartReply> {
    return self.makeAsyncUnaryCall(
      path: GameClientMetadata.Methods.start.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartInterceptors() ?? []
    )
  }

  internal func makeRestartCall(
    _ request: RestartRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RestartRequest, RestartReply> {
    return self.makeAsyncUnaryCall(
      path: GameClientMetadata.Methods.restart.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRestartInterceptors() ?? []
    )
  }

  internal func makeEndCall(
    _ request: EndRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EndRequest, EndReply> {
    return self.makeAsyncUnaryCall(
      path: GameClientMetadata.Methods.end.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEndInterceptors() ?? []
    )
  }

  internal func makeQuitCall(
    _ request: QuitRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<QuitRequest, QuitReply> {
    return self.makeAsyncUnaryCall(
      path: GameClientMetadata.Methods.quit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuitInterceptors() ?? []
    )
  }

  internal func makeMoveCall(
    _ request: MoveRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<MoveRequest, MoveReply> {
    return self.makeAsyncUnaryCall(
      path: GameClientMetadata.Methods.move.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveInterceptors() ?? []
    )
  }

  internal func makeMessageCall(
    _ request: MessageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<MessageRequest, MessageReply> {
    return self.makeAsyncUnaryCall(
      path: GameClientMetadata.Methods.message.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GameAsyncClientProtocol {
  internal func invite(
    _ request: InviteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> InviteReply {
    return try await self.performAsyncUnaryCall(
      path: GameClientMetadata.Methods.invite.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInviteInterceptors() ?? []
    )
  }

  internal func start(
    _ request: StartRequest,
    callOptions: CallOptions? = nil
  ) async throws -> StartReply {
    return try await self.performAsyncUnaryCall(
      path: GameClientMetadata.Methods.start.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartInterceptors() ?? []
    )
  }

  internal func restart(
    _ request: RestartRequest,
    callOptions: CallOptions? = nil
  ) async throws -> RestartReply {
    return try await self.performAsyncUnaryCall(
      path: GameClientMetadata.Methods.restart.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRestartInterceptors() ?? []
    )
  }

  internal func end(
    _ request: EndRequest,
    callOptions: CallOptions? = nil
  ) async throws -> EndReply {
    return try await self.performAsyncUnaryCall(
      path: GameClientMetadata.Methods.end.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEndInterceptors() ?? []
    )
  }

  internal func quit(
    _ request: QuitRequest,
    callOptions: CallOptions? = nil
  ) async throws -> QuitReply {
    return try await self.performAsyncUnaryCall(
      path: GameClientMetadata.Methods.quit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuitInterceptors() ?? []
    )
  }

  internal func move(
    _ request: MoveRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MoveReply {
    return try await self.performAsyncUnaryCall(
      path: GameClientMetadata.Methods.move.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveInterceptors() ?? []
    )
  }

  internal func message(
    _ request: MessageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessageReply {
    return try await self.performAsyncUnaryCall(
      path: GameClientMetadata.Methods.message.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct GameAsyncClient: GameAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GameClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GameClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol GameClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'invite'.
  func makeInviteInterceptors() -> [ClientInterceptor<InviteRequest, InviteReply>]

  /// - Returns: Interceptors to use when invoking 'start'.
  func makeStartInterceptors() -> [ClientInterceptor<StartRequest, StartReply>]

  /// - Returns: Interceptors to use when invoking 'restart'.
  func makeRestartInterceptors() -> [ClientInterceptor<RestartRequest, RestartReply>]

  /// - Returns: Interceptors to use when invoking 'end'.
  func makeEndInterceptors() -> [ClientInterceptor<EndRequest, EndReply>]

  /// - Returns: Interceptors to use when invoking 'quit'.
  func makeQuitInterceptors() -> [ClientInterceptor<QuitRequest, QuitReply>]

  /// - Returns: Interceptors to use when invoking 'move'.
  func makeMoveInterceptors() -> [ClientInterceptor<MoveRequest, MoveReply>]

  /// - Returns: Interceptors to use when invoking 'message'.
  func makeMessageInterceptors() -> [ClientInterceptor<MessageRequest, MessageReply>]
}

internal enum GameClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Game",
    fullName: "Game",
    methods: [
      GameClientMetadata.Methods.invite,
      GameClientMetadata.Methods.start,
      GameClientMetadata.Methods.restart,
      GameClientMetadata.Methods.end,
      GameClientMetadata.Methods.quit,
      GameClientMetadata.Methods.move,
      GameClientMetadata.Methods.message,
    ]
  )

  internal enum Methods {
    internal static let invite = GRPCMethodDescriptor(
      name: "Invite",
      path: "/Game/Invite",
      type: GRPCCallType.unary
    )

    internal static let start = GRPCMethodDescriptor(
      name: "Start",
      path: "/Game/Start",
      type: GRPCCallType.unary
    )

    internal static let restart = GRPCMethodDescriptor(
      name: "Restart",
      path: "/Game/Restart",
      type: GRPCCallType.unary
    )

    internal static let end = GRPCMethodDescriptor(
      name: "End",
      path: "/Game/End",
      type: GRPCCallType.unary
    )

    internal static let quit = GRPCMethodDescriptor(
      name: "Quit",
      path: "/Game/Quit",
      type: GRPCCallType.unary
    )

    internal static let move = GRPCMethodDescriptor(
      name: "Move",
      path: "/Game/Move",
      type: GRPCCallType.unary
    )

    internal static let message = GRPCMethodDescriptor(
      name: "Message",
      path: "/Game/Message",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol GameProvider: CallHandlerProvider {
  var interceptors: GameServerInterceptorFactoryProtocol? { get }

  func invite(request: InviteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<InviteReply>

  func start(request: StartRequest, context: StatusOnlyCallContext) -> EventLoopFuture<StartReply>

  func restart(request: RestartRequest, context: StatusOnlyCallContext) -> EventLoopFuture<RestartReply>

  func end(request: EndRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EndReply>

  func quit(request: QuitRequest, context: StatusOnlyCallContext) -> EventLoopFuture<QuitReply>

  func move(request: MoveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MoveReply>

  func message(request: MessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MessageReply>
}

extension GameProvider {
  internal var serviceName: Substring {
    return GameServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Invite":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InviteRequest>(),
        responseSerializer: ProtobufSerializer<InviteReply>(),
        interceptors: self.interceptors?.makeInviteInterceptors() ?? [],
        userFunction: self.invite(request:context:)
      )

    case "Start":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<StartRequest>(),
        responseSerializer: ProtobufSerializer<StartReply>(),
        interceptors: self.interceptors?.makeStartInterceptors() ?? [],
        userFunction: self.start(request:context:)
      )

    case "Restart":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RestartRequest>(),
        responseSerializer: ProtobufSerializer<RestartReply>(),
        interceptors: self.interceptors?.makeRestartInterceptors() ?? [],
        userFunction: self.restart(request:context:)
      )

    case "End":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EndRequest>(),
        responseSerializer: ProtobufSerializer<EndReply>(),
        interceptors: self.interceptors?.makeEndInterceptors() ?? [],
        userFunction: self.end(request:context:)
      )

    case "Quit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<QuitRequest>(),
        responseSerializer: ProtobufSerializer<QuitReply>(),
        interceptors: self.interceptors?.makeQuitInterceptors() ?? [],
        userFunction: self.quit(request:context:)
      )

    case "Move":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MoveRequest>(),
        responseSerializer: ProtobufSerializer<MoveReply>(),
        interceptors: self.interceptors?.makeMoveInterceptors() ?? [],
        userFunction: self.move(request:context:)
      )

    case "Message":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MessageRequest>(),
        responseSerializer: ProtobufSerializer<MessageReply>(),
        interceptors: self.interceptors?.makeMessageInterceptors() ?? [],
        userFunction: self.message(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol GameAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: GameServerInterceptorFactoryProtocol? { get }

  @Sendable func invite(
    request: InviteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> InviteReply

  @Sendable func start(
    request: StartRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> StartReply

  @Sendable func restart(
    request: RestartRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> RestartReply

  @Sendable func end(
    request: EndRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> EndReply

  @Sendable func quit(
    request: QuitRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> QuitReply

  @Sendable func move(
    request: MoveRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> MoveReply

  @Sendable func message(
    request: MessageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> MessageReply
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GameAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return GameServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return GameServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: GameServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Invite":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InviteRequest>(),
        responseSerializer: ProtobufSerializer<InviteReply>(),
        interceptors: self.interceptors?.makeInviteInterceptors() ?? [],
        wrapping: self.invite(request:context:)
      )

    case "Start":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<StartRequest>(),
        responseSerializer: ProtobufSerializer<StartReply>(),
        interceptors: self.interceptors?.makeStartInterceptors() ?? [],
        wrapping: self.start(request:context:)
      )

    case "Restart":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RestartRequest>(),
        responseSerializer: ProtobufSerializer<RestartReply>(),
        interceptors: self.interceptors?.makeRestartInterceptors() ?? [],
        wrapping: self.restart(request:context:)
      )

    case "End":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EndRequest>(),
        responseSerializer: ProtobufSerializer<EndReply>(),
        interceptors: self.interceptors?.makeEndInterceptors() ?? [],
        wrapping: self.end(request:context:)
      )

    case "Quit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<QuitRequest>(),
        responseSerializer: ProtobufSerializer<QuitReply>(),
        interceptors: self.interceptors?.makeQuitInterceptors() ?? [],
        wrapping: self.quit(request:context:)
      )

    case "Move":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MoveRequest>(),
        responseSerializer: ProtobufSerializer<MoveReply>(),
        interceptors: self.interceptors?.makeMoveInterceptors() ?? [],
        wrapping: self.move(request:context:)
      )

    case "Message":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MessageRequest>(),
        responseSerializer: ProtobufSerializer<MessageReply>(),
        interceptors: self.interceptors?.makeMessageInterceptors() ?? [],
        wrapping: self.message(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol GameServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'invite'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInviteInterceptors() -> [ServerInterceptor<InviteRequest, InviteReply>]

  /// - Returns: Interceptors to use when handling 'start'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartInterceptors() -> [ServerInterceptor<StartRequest, StartReply>]

  /// - Returns: Interceptors to use when handling 'restart'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRestartInterceptors() -> [ServerInterceptor<RestartRequest, RestartReply>]

  /// - Returns: Interceptors to use when handling 'end'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEndInterceptors() -> [ServerInterceptor<EndRequest, EndReply>]

  /// - Returns: Interceptors to use when handling 'quit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuitInterceptors() -> [ServerInterceptor<QuitRequest, QuitReply>]

  /// - Returns: Interceptors to use when handling 'move'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMoveInterceptors() -> [ServerInterceptor<MoveRequest, MoveReply>]

  /// - Returns: Interceptors to use when handling 'message'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMessageInterceptors() -> [ServerInterceptor<MessageRequest, MessageReply>]
}

internal enum GameServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Game",
    fullName: "Game",
    methods: [
      GameServerMetadata.Methods.invite,
      GameServerMetadata.Methods.start,
      GameServerMetadata.Methods.restart,
      GameServerMetadata.Methods.end,
      GameServerMetadata.Methods.quit,
      GameServerMetadata.Methods.move,
      GameServerMetadata.Methods.message,
    ]
  )

  internal enum Methods {
    internal static let invite = GRPCMethodDescriptor(
      name: "Invite",
      path: "/Game/Invite",
      type: GRPCCallType.unary
    )

    internal static let start = GRPCMethodDescriptor(
      name: "Start",
      path: "/Game/Start",
      type: GRPCCallType.unary
    )

    internal static let restart = GRPCMethodDescriptor(
      name: "Restart",
      path: "/Game/Restart",
      type: GRPCCallType.unary
    )

    internal static let end = GRPCMethodDescriptor(
      name: "End",
      path: "/Game/End",
      type: GRPCCallType.unary
    )

    internal static let quit = GRPCMethodDescriptor(
      name: "Quit",
      path: "/Game/Quit",
      type: GRPCCallType.unary
    )

    internal static let move = GRPCMethodDescriptor(
      name: "Move",
      path: "/Game/Move",
      type: GRPCCallType.unary
    )

    internal static let message = GRPCMethodDescriptor(
      name: "Message",
      path: "/Game/Message",
      type: GRPCCallType.unary
    )
  }
}
